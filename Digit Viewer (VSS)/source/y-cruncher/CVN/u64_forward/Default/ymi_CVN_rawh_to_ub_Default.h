/* ymi_CVN_rawh_to_ub_Default.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 01/22/2011
 * Last Modified    : 01/22/2011
 * 
 * 
 *      ymi         =   Micro-Intrinsic
 *      CVN         =   Format Conversion Unit
 *      rawh_to_ub  =   Hexadecimal Raw -> Binary Integer
 *      Default     =   Default Instruction Set
 * 
 */

#ifndef _ymi_CVN_rawh_to_ub_Default_H
#define _ymi_CVN_rawh_to_ub_Default_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#define ymi_CVN_rawh_to_u64b_u0_Default(T,A){   \
    register ym_u64 _r0,_r1,_r2,_r3;    \
    \
    _r0 = ((const ym_u64*)(A))[0];  \
    _r1 = ((const ym_u64*)(A))[1];  \
    \
    _r2 = _r0 & 0x000f000f000f000full;  \
    _r3 = _r1 & 0x000f000f000f000full;  \
    _r0 >>= 8;  \
    _r1 >>= 8;  \
    _r0 &= 0x000f000f000f000full;   \
    _r1 &= 0x000f000f000f000full;   \
    _r2 <<= 4;  \
    _r3 <<= 4;  \
    _r0 |= _r2; \
    _r1 |= _r3; \
    \
    _r2 = _r0 & 0x000000ff000000ffull;  \
    _r3 = _r1 & 0x000000ff000000ffull;  \
    _r0 >>= 16; \
    _r1 >>= 16; \
    _r0 &= 0x000000ff000000ffull;   \
    _r1 &= 0x000000ff000000ffull;   \
    _r2 <<= 8;  \
    _r3 <<= 8;  \
    _r0 |= _r2; \
    _r1 |= _r3; \
    \
    _r2 = _r0 & 0x000000000000ffffull;  \
    _r3 = _r1 & 0x000000000000ffffull;  \
    _r0 >>= 32; \
    _r1 >>= 32; \
    _r0 &= 0x000000000000ffffull;   \
    _r1 &= 0x000000000000ffffull;   \
    _r2 <<= 16; \
    _r3 <<= 16; \
    _r0 |= _r2; \
    _r1 |= _r3; \
    \
    _r0 <<= 32; \
    _r0 |= _r1; \
    \
    ((ym_u64*)(T))[0] = _r0;    \
}
#define ymi_CVN_rawh_to_u64b_u1_Default(T,A){   \
    register ym_u64 _r0,_r1,_r2,_r3;    \
    register ym_u64 _s0,_s1,_s2,_s3;    \
    \
    _r0 = ((const ym_u64*)(A))[0];  \
    _r1 = ((const ym_u64*)(A))[1];  \
    _s0 = ((const ym_u64*)(A))[2];  \
    _s1 = ((const ym_u64*)(A))[3];  \
    \
    _r2 = _r0 & 0x000f000f000f000full;  \
    _r3 = _r1 & 0x000f000f000f000full;  \
    _s2 = _s0 & 0x000f000f000f000full;  \
    _s3 = _s1 & 0x000f000f000f000full;  \
    _r0 >>= 8;  \
    _r1 >>= 8;  \
    _s0 >>= 8;  \
    _s1 >>= 8;  \
    _r0 &= 0x000f000f000f000full;   \
    _r1 &= 0x000f000f000f000full;   \
    _s0 &= 0x000f000f000f000full;   \
    _s1 &= 0x000f000f000f000full;   \
    _r2 <<= 4;  \
    _r3 <<= 4;  \
    _s2 <<= 4;  \
    _s3 <<= 4;  \
    _r0 |= _r2; \
    _r1 |= _r3; \
    _s0 |= _s2; \
    _s1 |= _s3; \
    \
    _r2 = _r0 & 0x000000ff000000ffull;  \
    _r3 = _r1 & 0x000000ff000000ffull;  \
    _s2 = _s0 & 0x000000ff000000ffull;  \
    _s3 = _s1 & 0x000000ff000000ffull;  \
    _r0 >>= 16; \
    _r1 >>= 16; \
    _s0 >>= 16; \
    _s1 >>= 16; \
    _r0 &= 0x000000ff000000ffull;   \
    _r1 &= 0x000000ff000000ffull;   \
    _s0 &= 0x000000ff000000ffull;   \
    _s1 &= 0x000000ff000000ffull;   \
    _r2 <<= 8;  \
    _r3 <<= 8;  \
    _s2 <<= 8;  \
    _s3 <<= 8;  \
    _r0 |= _r2; \
    _r1 |= _r3; \
    _s0 |= _s2; \
    _s1 |= _s3; \
    \
    _r2 = _r0 & 0x000000000000ffffull;  \
    _r3 = _r1 & 0x000000000000ffffull;  \
    _s2 = _s0 & 0x000000000000ffffull;  \
    _s3 = _s1 & 0x000000000000ffffull;  \
    _r0 >>= 32; \
    _r1 >>= 32; \
    _s0 >>= 32; \
    _s1 >>= 32; \
    _r0 &= 0x000000000000ffffull;   \
    _r1 &= 0x000000000000ffffull;   \
    _s0 &= 0x000000000000ffffull;   \
    _s1 &= 0x000000000000ffffull;   \
    _r2 <<= 16; \
    _r3 <<= 16; \
    _s2 <<= 16; \
    _s3 <<= 16; \
    _r0 |= _r2; \
    _r1 |= _r3; \
    _s0 |= _s2; \
    _s1 |= _s3; \
    \
    _r0 <<= 32; \
    _s0 <<= 32; \
    _r0 |= _r1; \
    _s0 |= _s1; \
    \
    ((ym_u64*)(T))[0] = _r0;    \
    ((ym_u64*)(T))[1] = _s0;    \
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#endif
